AWSTemplateFormatVersion: 2010-09-09

Parameters:
  prefix:
    Type: String

Outputs:
  Region:
    Description: The AWS region of the user pool
    Value:
      Ref: AWS::Region
  UserPoolId:
    Description: The user pool Id
    Value:
      Ref: UserPool
  UserPoolWebClientId:
    Description: The user pool's web client Id
    Value:
      Ref: UserPoolWebClient
  # UserPoolWebClientSecret:
  #   Description: The user pool's web client secret
  #   Value:
  #     Fn::GetAtt: UserPoolWebClientInputs.appSecret
  UserPoolAppClientId:
    Description: The user pool's app client id
    Value:
      Ref: UserPoolAppClient
  UserPoolAppClientSecret:
    Description: The user pool's app client secret
    Value:
      Fn::GetAtt: UserPoolAppClientInputs.appSecret
  CognitoJSConfig:
    Description: The cognito configuration javascript import
    Value:
      Fn::Sub:
        - |
          const awsconfig = {
            'aws_cognito_region': '${region}',
            'aws_user_pools_id': '${userPoolId}',
            'aws_user_pools_web_client_id': '${userPoolWebClientId}',
            'oauth': {}
          };

          export default awsconfig;
        - region:
            Ref: AWS::Region
          userPoolId:
            Ref: UserPool
          userPoolWebClientId:
            Ref: UserPoolWebClient

Resources:
  # Allow the UserPool SMS Config to publish via the
  # Simple Notification Service during MFA Process
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: '${prefix}_snsRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId:
                  Fn::Sub: '${prefix}_roleExternalId'
      Policies:
        - PolicyName:
            Fn::Sub: '${prefix}_snsPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "*"

  # The AWS Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    DependsOn: SNSRole
    Properties:
      UserPoolName:
        Fn::Sub: '${prefix}_userPool'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
        InviteMessageTemplate:
          EmailSubject: Your temporary password for Identity Test Module
          EmailMessage: Your username is {username} and temporary password for Identity Test Module is {####}. 
          SMSMessage: Your username is {username} and temporary password for Identity Test Module is {####}. 
      MfaConfiguration: OPTIONAL
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject:
        Your verification code for Identity Test Module
      EmailVerificationMessage:
        Your email address verification code for Identity Test Module is {####}.
      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt: SNSRole.Arn
        ExternalId:
          Fn::Sub: ${prefix}_roleExternalId
      SmsAuthenticationMessage:
        Your SMS authentication code for Identity Test Module is {####}.
      SmsVerificationMessage:
        Your mobile phone verification code for Identity Test Module is {####}.
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE      
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: given_name
          Required: false
          Mutable: true
        - Name: middle_name
          Required: false
          Mutable: true
        - Name: family_name
          Required: false
          Mutable: true
        - Name: email
          Required: true
          Mutable: true
        - Name: phone_number
          Required: true
          Mutable: true
        - Name: preferences
          AttributeDataType: String
          Required: false
          Mutable: true
          StringAttributeConstraints:
            MinLength: 1
            MaxLength: 256

  # Provide web application access to user pool
  UserPoolWebClient:
    Type: "AWS::Cognito::UserPoolClient"
    DependsOn: UserPool
    Properties:
      ClientName:
        Fn::Sub: '${prefix}_userPoolWebClient'
      GenerateSecret: False
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - given_name
        - middle_name
        - family_name
        - email
        - email_verified
        - phone_number
        - phone_number_verified
        - custom:preferences
      WriteAttributes:
        - given_name
        - middle_name
        - family_name
        - email
        - phone_number
        - custom:preferences
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: UserPool

  # Provide mobile application access to user pool
  UserPoolAppClient:
    Type: "AWS::Cognito::UserPoolClient"
    DependsOn: UserPool
    Properties:
      ClientName:
        Fn::Sub: '${prefix}_userPoolAppClient'
      GenerateSecret: True
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - given_name
        - middle_name
        - family_name
        - email
        - email_verified
        - phone_number
        - phone_number_verified
        - custom:preferences
      WriteAttributes:
        - given_name
        - middle_name
        - family_name
        - email
        - phone_number
        - custom:preferences
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: UserPool

  ########################################
  # User pool client lambda used by stack
  # to return the client secrets.

  UserPoolClientFnRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
    - UserPoolWebClient
    - UserPoolAppClient
    Properties:
      RoleName:
        Fn::Sub: '${prefix}_userPoolClientInfoFn'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  UserPoolClientFn:
    Type: 'AWS::Lambda::Function'
    DependsOn: UserPoolClientFnRole
    Properties:
      FunctionName:
        Fn::Sub: '${prefix}_userPoolClientInfoFn'
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();

          exports.handler = (event, context, callback) => {
          if (event.RequestType == 'Delete') {
             response.send(event, context, response.SUCCESS, {})
          }
          if (event.RequestType == 'Update' || event.RequestType == 'Create') {
            const params = {
              ClientId: event.ResourceProperties.clientId,
              UserPoolId: event.ResourceProperties.userPoolId
            };
            identity.describeUserPoolClient(params).promise()
              .then((res) => {
                response.send(event, context, response.SUCCESS, {'appSecret': res.UserPoolClient.ClientSecret});
              })
              .catch((err) => {
                response.send(event, context, response.FAILED, {err});
              });
            }
          };
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: '300'
      Role:
        Fn::GetAtt: UserPoolClientFnRole.Arn
  UserPoolClientFnPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: UserPoolClientFn
    Properties:
      PolicyName:
        Fn::Sub: '${prefix}_userPoolClientInfoFn'
      Roles:
        - Ref: UserPoolClientFnRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
            Resource:
              Fn::GetAtt: UserPool.Arn
  UserPoolClientFnLogPolicy:
    DependsOn: UserPoolClientFnPolicy
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:
        Fn::Sub: '${prefix}_userPoolClientInfoFn_log'
      Roles:
        - Ref: UserPoolClientFnRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              Fn::Sub:
                - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambda}:log-stream:*
                - lambda:
                    Ref: UserPoolClientFn
  # UserPoolWebClientInputs:
  #   Type: 'Custom::LambdaCallout'
  #   DependsOn: UserPoolClientFnLogPolicy
  #   Properties:
  #     ServiceToken:
  #       Fn::GetAtt: UserPoolClientFn.Arn
  #     clientId:
  #       Ref: UserPoolWebClient
  #     userPoolId:
  #       Ref: UserPool
  UserPoolAppClientInputs:
    Type: 'Custom::LambdaCallout'
    DependsOn: UserPoolClientFnLogPolicy
    Properties:
      ServiceToken:
        Fn::GetAtt: UserPoolClientFn.Arn
      clientId:
        Ref: UserPoolAppClient
      userPoolId:
        Ref: UserPool
